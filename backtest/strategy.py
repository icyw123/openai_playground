"""Strategy base classes and helper utilities."""
from __future__ import annotations

from dataclasses import dataclass
from typing import List, Optional

import pandas as pd

from .portfolio import Portfolio


@dataclass
class Order:
    """Represents an order generated by a strategy."""

    symbol: str
    target_percent: float


@dataclass
class StrategyContext:
    """Provides the strategy with access to the backtest environment."""

    current_date: pd.Timestamp
    data_provider: "AkshareDataProvider"
    portfolio: Portfolio

    def get_price(self, symbol: str, date: Optional[pd.Timestamp] = None) -> Optional[float]:
        if date is None:
            date = self.current_date
        bar = self.data_provider.get_bar(symbol, date)
        if bar is None:
            return None
        return bar.close

    def get_history(self, symbol: str) -> pd.DataFrame:
        return self.data_provider.get_stock_data(symbol)


class Strategy:
    """Base class for strategies."""

    def on_date(self, ctx: StrategyContext) -> List[Order]:
        raise NotImplementedError
