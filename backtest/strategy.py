"""Strategy base classes and helper utilities."""
from __future__ import annotations

from typing import Any, List, Optional

import pandas as pd
from pydantic import BaseModel, Field, validator

from .portfolio import Portfolio


class Order(BaseModel):
    """Represents an order generated by a strategy."""

    symbol: str
    target_percent: float = Field(..., ge=0.0)

    @validator("target_percent")
    def validate_target_percent(cls, value: float) -> float:
        if value > 1.0:
            raise ValueError("target_percent must be less than or equal to 1.0")
        return value


class StrategyContext(BaseModel):
    """Provides the strategy with access to the backtest environment."""

    current_date: pd.Timestamp
    data_provider: Any
    portfolio: Portfolio

    class Config:
        arbitrary_types_allowed = True

    def get_price(self, symbol: str, date: Optional[pd.Timestamp] = None) -> Optional[float]:
        lookup_date = date or self.current_date
        bar = self.data_provider.get_bar(symbol, lookup_date)
        if bar is None:
            return None
        return bar.close

    def get_history(self, symbol: str) -> pd.DataFrame:
        return self.data_provider.get_stock_data(symbol)


class Strategy(BaseModel):
    """Base class for strategies."""

    class Config:
        arbitrary_types_allowed = True

    def on_date(self, ctx: StrategyContext) -> List[Order]:
        raise NotImplementedError
